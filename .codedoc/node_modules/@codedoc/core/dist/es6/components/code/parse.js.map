{"version":3,"file":"parse.js","sourceRoot":"","sources":["../../../../src/components/code/parse.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,oBAAoB,GAAG,OAAO,CAAC;AAC5C,MAAM,CAAC,MAAM,gBAAgB,GAAG,OAAO,CAAC;AACxC,MAAM,CAAC,MAAM,mBAAmB,GAAG,OAAO,CAAC;AAC3C,MAAM,CAAC,MAAM,UAAU,GAAG,GAAG,CAAC;AAG9B,MAAM,UAAU,KAAK,CAAC,IAAY,EAAE,IAAI,GAAG,KAAK;IAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC/B,MAAM,UAAU,GAAa,EAAE,CAAC;IAChC,MAAM,WAAW,GAAa,EAAE,CAAC;IACjC,MAAM,OAAO,GAA4B,EAAE,CAAC;IAC5C,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACrB,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC;QACjC,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,IAAI,EAAE;YACvC,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;SACxF;aAAM;YACL,IAAI,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAE;gBACzC,UAAU,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;gBAChC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;aAC5D;iBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;gBAC5C,UAAU,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;gBAC5B,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;aACxD;iBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE;gBAC/C,UAAU,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;gBAC9B,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;aAC3D;iBAAM;gBACL,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACvB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACxB;SACF;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAE1C,OAAO,CAAC,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;AACxD,CAAC","sourcesContent":["export const DefaultHighlightMark = '/*!*/';\nexport const AddHighlightMark = '/*+*/';\nexport const RemoveHighlightMark = '/*-*/';\nexport const OutputMark = '>';\n\n\nexport function parse(code: string, term = false): [string, string[], string[], {[l: number]: string[]}] {\n  const lines = code.split('\\n');\n  const highlights: string[] = [];\n  const linesParsed: string[] = [];\n  const outputs: {[l: number]: string[]} = {};\n  lines.forEach((line) => {\n    const index = linesParsed.length;\n    if (line.startsWith(OutputMark) && term) {\n      (outputs[index - 1] || (outputs[index - 1] = [])).push(line.substr(OutputMark.length));\n    } else {\n      if (line.startsWith(DefaultHighlightMark)) {\n        highlights[index] = 'highlight';\n        linesParsed.push(line.substr(DefaultHighlightMark.length));\n      } else if (line.startsWith(AddHighlightMark)) {\n        highlights[index] = 'added';\n        linesParsed.push(line.substr(AddHighlightMark.length));\n      } else if (line.startsWith(RemoveHighlightMark)) {\n        highlights[index] = 'removed';\n        linesParsed.push(line.substr(RemoveHighlightMark.length));\n      } else {\n        highlights[index] = '';\n        linesParsed.push(line);\n      }\n    }\n  });\n\n  const codeParsed = linesParsed.join('\\n');\n\n  return [codeParsed, linesParsed, highlights, outputs];\n}\n"]}